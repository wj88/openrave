# Written by Dr Jodie Wetherall <wj88@gre.ac.uk>, School of Engineering, University of Greenwich
#
# This file is intended to support OO bindings to the OpenRAVE API. It assumes
# the same licencing scheme as OpenRAVE.
#
# OpenRAVE is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Maps to the declarations in /include/openrave/sensorsystem.h

#include "prototypes.idl"
#include "interface.idl"
#include "openrave.idl"
#include "kinbody.idl"

[scriptable, uuid(E6B2902A-38B8-429E-9D0F-035ACB5232CC)]
interface ISensorSystemBase  : IInterfaceBase {
	#SensorSystemBase(EnvironmentBasePtr penv) : InterfaceBase(PT_SensorSystem, penv);
    #virtual ~SensorSystemBase();#
    void Reset();
    void AddRegisteredBodies(in unsigned long count, [array, size_is(count)] in IKinBody vbodies);
    IKinBodyManageData AddKinBody(in IKinBody pbody, in IXMLReadable pdata);
    boolean RemoveKinBody(in IKinBody pbody);
    boolean IsBodyPresent(in IKinBody pbody);
    boolean EnableBody(in IKinBody pbody, in boolean bEnable);
    boolean SwitchBody(in IKinBody pbody1, in IKinBody pbody2);
};

[scriptable, uuid(421925E2-10B7-4B61-955C-F57FF4487DEE)]
interface ISimpleSensorSystemXMLData : IXMLReadable {
	#XMLData(const std::string& xmlid) : XMLReadable(xmlid), id(0);
	void copy(in ISimpleSensorSystemXMLData pdata);
	attribute string sid;
	attribute long id;
	attribute string strOffsetLink;
	attribute ITransformF transOffset;
	attribute ITransformF transPreOffset;
};

[scriptable, uuid(7A86ACCB-EE1E-4300-9413-62CF91B06429)]
interface ISimpleSensorSystemBodyData : IKinBodyManageData {
	#BodyData(SensorSystemBasePtr psensorsystem, KinBodyPtr pbody, boost::shared_ptr<XMLData> initdata) : KinBody::ManageData(psensorsystem), _initdata(initdata), bPresent(false), bEnabled(true), bLock(false);
	#IXMLReadable GetData();
	#IKinBodyLink GetOffsetLink();
	#boolean IsPresent();
	#boolean IsEnabled();
	#boolean IsLocked();
	#boolean Lock(in boolean bDoLock);
	long GetId();
	string GetSid();
	ITransformF GetRecentTransform();
};

[scriptable, uuid(15500D68-E9D7-49AB-9551-F9CA752AA7D8)]
interface ISimpleSensorSystemSimpleXMLReader : IBaseXMLReader {
	#SimpleXMLReader(boost::shared_ptr<XMLData>);
	#IXMLReadable GetReadable();
	#long startElement(in string name, in nsIProperties atts);
	#boolean endElement(in string name);
	#void characters(out string ch);
}; 

[scriptable, uuid(20804F2B-0863-41C3-84E4-822A2FE03476)]
interface ISimpleSensorSystem : ISensorSystemBase {
	#SimpleSensorSystem(const std::string& xmlid, EnvironmentBasePtr penv);
    #~SimpleSensorSystem();
    #void Reset();
    #void AddRegisteredBodies(in unsigned long count, [array, size_is(count)] in IKinBody vbodies);
    #IKinBodyManageData AddKinBody(in IKinBody pbody, IXMLReadable pdata);
    #boolean RemoveKinBody(in IKinBody pbody);
    #boolean IsBodyPresent(in IKinBody pbody);
    #boolean EnableBody(in IKinBody pbody, in boolean bEnable);
    #boolean SwitchBody(in IKinBody pbody1, in KinBody pbody2);
};
