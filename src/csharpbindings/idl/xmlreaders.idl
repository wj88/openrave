# Written by Dr Jodie Wetherall <wj88@gre.ac.uk>, School of Engineering, University of Greenwich
#
# This file is intended to support OO bindings to the OpenRAVE API. It assumes
# the same licencing scheme as OpenRAVE.
#
# OpenRAVE is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Maps to the declarations in /include/openrave/xmlreaders.h

#include "prototypes.idl"
#include "openrave.idl"

[scriptable, uuid(F8D7F72F-E95F-44D8-A59B-1B1B323C782A)]
interface IStringXMLReadable : IXMLReadable {
	#StringXMLReadable(const std::string& xmlid, const std::string& data);
    void Serialize(in IBaseXMLWriter writer, in long options);
    string GetData();
    attribute string _data;
};

[scriptable, uuid(31DEAB5A-71D5-466C-920D-2AACF9CDBA1C)]
interface IHierarchicalXMLReadable : IXMLReadable {
	#HierarchicalXMLReadable(const std::string& xmlid, const AttributesList& atts);
    #virtual ~HierarchicalXMLReadable();
    void Serialize(in IBaseXMLWriter writer, in long options);
    attribute string _data;
    attribute nsIProperties _atts;
	void GetListChildren(out unsigned long count, [array, size_is(count)] out IHierarchicalXMLReadable v);
	void SetListChildren(in unsigned long count, [array, size_is(count)] in IHierarchicalXMLReadable v);
};

[scriptable, uuid(83A5FDBA-6BA4-43DA-AFD3-ED5ECDD3078D)]
interface ITrajectoryReader : IBaseXMLReader {
	#TrajectoryReader(EnvironmentBasePtr env, TrajectoryBasePtr traj = TrajectoryBasePtr(), const AttributesList& atts=AttributesList());
    #long startElement(in string name, in nsIProperties atts);
    #boolean endElement(in string name);
    #void characters(out string ch);
    ITrajectoryBase GetTrajectory();
};

[scriptable, uuid(D77E8FA9-1AA5-4442-BD5C-8368FEE27AE9)]
interface IGeometryInfoReader : IBaseXMLReader {
	#GeometryInfoReader(KinBody::GeometryInfoPtr geom = KinBody::GeometryInfoPtr(), const AttributesList& atts=AttributesList());
    #long startElement(in string name, in nsIProperties atts);
    #boolean endElement(in string name);
    #void characters(out string ch);
    IKinBodyGeometryInfo GetGeometryInfo();
    boolean IsOverwriteDiffuse();
    boolean IsOverwriteAmbient();
    boolean IsOverwriteTransparency();
};

[scriptable, uuid(117455D9-E5EE-451B-9313-016F3B74240E)]
interface IHierarchicalXMLReader : IBaseXMLReader {
	#HierarchicalXMLReader(const std::string& xmlid, const AttributesList& atts);
    #long startElement(in string name, in nsIProperties atts);
    #boolean endElement(in string name);
    #void characters(out string ch);
    #IXMLReadable GetReadable();
};

[scriptable, uuid(B1E2F6C4-7EA4-4B31-A050-9EC5512C4E28)]
interface IStreamXMLWriter : IBaseXMLReader {
	#StreamXMLWriter(const std::string& xmltag, const AttributesList& atts=AttributesList());
    string GetFormat();
    void SetCharData(in string data);
    IBaseXMLWriter AddChild(in string xmltag, in nsIProperties atts);
    void Serialize(in nsIOutputStream stream);
	void GetListChildren(out unsigned long count, [array, size_is(count)] out IStreamXMLWriter v);
	void SetListChildren(in unsigned long count, [array, size_is(count)] in IStreamXMLWriter v);
    attribute string _xmltag;
	attribute string _data;
    attribute nsIProperties _atts;
};
